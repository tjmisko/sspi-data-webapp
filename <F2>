import requests
from io import BytesIO, StringIO
import zipfile
import pandas as pd
from sspi_flask_app.models.database import sspi_raw_api_data

def collectVDEMData(SourceIndicatorCode, IndicatorCode, **kwargs):
    url = "https://v-dem.net/media/datasets/V-Dem-CY-FullOthers_csv_v13.zip"
    print(f"Fetching data from: {url}")

    try:
        res = requests.get(url)
        if res.status_code != 200:
            err = f"(HTTP Error {res.status_code})"
            yield f"Failed to fetch data from source {err}"
            return
        print("Successfully downloaded ZIP file.")

        with zipfile.ZipFile(BytesIO(res.content)) as z:
            file_list = z.namelist()
            print("Files in ZIP:", file_list) 
            csv_files = [f for f in file_list if f.lower().endswith(".csv") and "__MACOSX" not in f]
            if not csv_files:
                yield "No CSV files found in the ZIP."
                return
            for f in csv_files:
                print(f"Processing CSV file: {f}")
                yield f"Found CSV file: {f}\n"
                with z.open(f) as data:
                    csv_string = data.read().decode("utf-8")
                df = pd.read_csv(StringIO(csv_string))
                print("CSV Columns:", df.columns)
                if SourceIndicatorCode not in df.columns:
                    yield f"Column '{SourceIndicatorCode}' not found in CSV file '{f}'."
                    return
                df = df[[SourceIndicatorCode]].rename(columns={SourceIndicatorCode: IndicatorCode})
                print(f"Filtered DataFrame for {IndicatorCode}:\n", df.head())
                filtered_csv_string = df.to_csv(index=False)
                try:
                    sspi_raw_api_data.raw_insert_one({"csv": filtered_csv_string}, IndicatorCode, **kwargs)
                    print(f"Successfully inserted data for {IndicatorCode}")
                except Exception as e:
                    print(f"Database insert failed: {e}")
                    yield f"Database insert failed for {IndicatorCode}: {str(e)}"
                    return
    except Exception as e:
        print(f"Error in data collection: {e}")
        yield f"Error in data collection: {str(e)}"
        return

    yield f"Collection complete for {IndicatorCode} (EPI {SourceIndicatorCode})"
