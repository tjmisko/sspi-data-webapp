#!/usr/bin/env python3
"""
Clean up empty WID datasets based on evaluation results.
Removes Python files and documentation directories for datasets marked for deletion.
"""

import os
import sys
import csv
import shutil
from pathlib import Path
from datetime import datetime
from typing import List, Dict, Tuple

# Add project root to path
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))


def load_status_reports() -> Tuple[List[Dict], List[Dict]]:
    """Load the status reports generated by evaluate_wid_datasets.py"""
    # Load main status report
    status_file = project_root / "wid_datasets_status.csv"
    if not status_file.exists():
        print(f"Error: Status file {status_file} not found. Run evaluate_wid_datasets.py first.")
        sys.exit(1)
    
    with open(status_file, "r") as f:
        reader = csv.DictReader(f)
        main_status = list(reader)
    
    # Load orphaned docs report if it exists
    orphan_file = project_root / "wid_orphaned_docs.csv"
    orphaned_docs = []
    if orphan_file.exists():
        with open(orphan_file, "r") as f:
            reader = csv.DictReader(f)
            orphaned_docs = list(reader)
    
    return main_status, orphaned_docs


def confirm_deletion(datasets_to_delete: List[Dict], orphaned_docs: List[Dict]) -> bool:
    """Ask user to confirm deletion."""
    print("\n" + "="*50)
    print("DELETION SUMMARY")
    print("="*50)
    print(f"Datasets marked for deletion: {len(datasets_to_delete)}")
    print(f"Orphaned documentation directories: {len(orphaned_docs)}")
    
    total_files = 0
    total_dirs = 0
    
    for dataset in datasets_to_delete:
        if dataset["HasPythonFile"] == "True":
            total_files += 1
        if dataset["HasDocumentation"] == "True":
            total_dirs += 1
    
    total_dirs += len(orphaned_docs)
    
    print(f"\nFiles to delete:")
    print(f"  - Python cleaner files: {total_files}")
    print(f"  - Documentation directories: {total_dirs}")
    print(f"  - TOTAL: {total_files + total_dirs}")
    
    print("\nSample datasets to be deleted (first 10):")
    for dataset in datasets_to_delete[:10]:
        print(f"  - {dataset['DatasetCode']}")
    
    if len(datasets_to_delete) > 10:
        print(f"  ... and {len(datasets_to_delete) - 10} more")
    
    response = input("\nProceed with deletion? (yes/no): ").strip().lower()
    return response == "yes"


def delete_files_and_dirs(datasets_to_delete: List[Dict], orphaned_docs: List[Dict]) -> Dict:
    """Delete the files and directories marked for removal."""
    summary = {
        "python_files_deleted": [],
        "python_files_failed": [],
        "doc_dirs_deleted": [],
        "doc_dirs_failed": [],
        "orphan_dirs_deleted": [],
        "orphan_dirs_failed": []
    }
    
    print("\nStarting deletion process...")
    
    # Delete Python files and documentation for datasets marked DELETE
    for dataset in datasets_to_delete:
        dataset_code = dataset["DatasetCode"]
        
        # Delete Python file
        if dataset["HasPythonFile"] == "True" and dataset["PythonFilePath"]:
            py_path = project_root / dataset["PythonFilePath"]
            try:
                if py_path.exists():
                    py_path.unlink()
                    summary["python_files_deleted"].append(str(py_path))
                    print(f"  Deleted Python file: {dataset['PythonFilePath']}")
                else:
                    print(f"  Warning: Python file not found: {dataset['PythonFilePath']}")
            except Exception as e:
                summary["python_files_failed"].append(f"{dataset['PythonFilePath']}: {e}")
                print(f"  Error deleting Python file {dataset['PythonFilePath']}: {e}")
        
        # Delete documentation directory
        if dataset["HasDocumentation"] == "True" and dataset["DocumentationPath"]:
            doc_path = project_root / dataset["DocumentationPath"]
            try:
                if doc_path.exists():
                    shutil.rmtree(doc_path)
                    summary["doc_dirs_deleted"].append(str(doc_path))
                    print(f"  Deleted documentation: {dataset['DocumentationPath']}")
                else:
                    print(f"  Warning: Documentation not found: {dataset['DocumentationPath']}")
            except Exception as e:
                summary["doc_dirs_failed"].append(f"{dataset['DocumentationPath']}: {e}")
                print(f"  Error deleting documentation {dataset['DocumentationPath']}: {e}")
    
    # Delete orphaned documentation directories
    for orphan in orphaned_docs:
        doc_path = project_root / orphan["DocumentationPath"]
        try:
            if doc_path.exists():
                shutil.rmtree(doc_path)
                summary["orphan_dirs_deleted"].append(str(doc_path))
                print(f"  Deleted orphaned documentation: {orphan['DocumentationPath']}")
            else:
                print(f"  Warning: Orphaned documentation not found: {orphan['DocumentationPath']}")
        except Exception as e:
            summary["orphan_dirs_failed"].append(f"{orphan['DocumentationPath']}: {e}")
            print(f"  Error deleting orphaned documentation {orphan['DocumentationPath']}: {e}")
    
    return summary


def write_cleanup_summary(summary: Dict):
    """Write a summary of the cleanup operation."""
    summary_file = project_root / "wid_cleanup_summary.txt"
    
    with open(summary_file, "w") as f:
        f.write("WID DATASET CLEANUP SUMMARY\n")
        f.write(f"Timestamp: {datetime.now().isoformat()}\n")
        f.write("="*50 + "\n\n")
        
        f.write(f"Python files deleted: {len(summary['python_files_deleted'])}\n")
        f.write(f"Python files failed: {len(summary['python_files_failed'])}\n")
        f.write(f"Documentation directories deleted: {len(summary['doc_dirs_deleted'])}\n")
        f.write(f"Documentation directories failed: {len(summary['doc_dirs_failed'])}\n")
        f.write(f"Orphaned directories deleted: {len(summary['orphan_dirs_deleted'])}\n")
        f.write(f"Orphaned directories failed: {len(summary['orphan_dirs_failed'])}\n")
        
        total_deleted = (len(summary['python_files_deleted']) + 
                        len(summary['doc_dirs_deleted']) + 
                        len(summary['orphan_dirs_deleted']))
        total_failed = (len(summary['python_files_failed']) + 
                       len(summary['doc_dirs_failed']) + 
                       len(summary['orphan_dirs_failed']))
        
        f.write(f"\nTOTAL DELETED: {total_deleted}\n")
        f.write(f"TOTAL FAILED: {total_failed}\n")
        
        if summary['python_files_failed']:
            f.write("\n\nFailed Python file deletions:\n")
            for failure in summary['python_files_failed']:
                f.write(f"  - {failure}\n")
        
        if summary['doc_dirs_failed']:
            f.write("\n\nFailed documentation directory deletions:\n")
            for failure in summary['doc_dirs_failed']:
                f.write(f"  - {failure}\n")
        
        if summary['orphan_dirs_failed']:
            f.write("\n\nFailed orphaned directory deletions:\n")
            for failure in summary['orphan_dirs_failed']:
                f.write(f"  - {failure}\n")
    
    print(f"\nCleanup summary written to {summary_file}")
    return summary_file


def main():
    """Main cleanup function."""
    print("WID Dataset Cleanup Script")
    print("="*50)
    
    # Load status reports
    main_status, orphaned_docs = load_status_reports()
    
    # Filter datasets marked for deletion
    datasets_to_delete = [d for d in main_status if d["Status"] == "DELETE"]
    
    if not datasets_to_delete and not orphaned_docs:
        print("No datasets or orphaned directories to delete.")
        return
    
    # Confirm deletion with user
    if not confirm_deletion(datasets_to_delete, orphaned_docs):
        print("Deletion cancelled by user.")
        return
    
    # Perform deletion
    summary = delete_files_and_dirs(datasets_to_delete, orphaned_docs)
    
    # Write summary
    summary_file = write_cleanup_summary(summary)
    
    # Final report
    print("\n" + "="*50)
    print("CLEANUP COMPLETE")
    print("="*50)
    total_deleted = (len(summary['python_files_deleted']) + 
                    len(summary['doc_dirs_deleted']) + 
                    len(summary['orphan_dirs_deleted']))
    total_failed = (len(summary['python_files_failed']) + 
                   len(summary['doc_dirs_failed']) + 
                   len(summary['orphan_dirs_failed']))
    
    print(f"Successfully deleted: {total_deleted} files/directories")
    if total_failed > 0:
        print(f"Failed deletions: {total_failed} (see {summary_file} for details)")
    
    print("\nYou can now review the changes with 'git status'")


if __name__ == "__main__":
    main()